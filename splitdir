#!/usr/bin/env python

import argparse
import sys
import os
import shutil
import glob
import re
import logging

args = None


def parse_args():
    logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

    parser = argparse.ArgumentParser(description='Split directory',
                                     epilog="https://github.com/shenwei356/bio_scripts")

    parser.add_argument('indir', type=str, help='source directory')
    parser.add_argument('-o', '--outdir', type=str, help='out directory')
    parser.add_argument('-s', '--suffix', type=str,
                        help='common suffix (regular expression) of files/dirs indir. ' +
                             'if not given, it will be the longest common substring of the files')
    parser.add_argument('-m', '--mv', action='store_true',
                        help='moving files instead of creating symbolic links')
    parser.add_argument("-f", "--force", action="store_true",
                        help='force file overwriting, i.e. deleting existed out directory')

    args = parser.parse_args()

    args.indir = os.path.normpath(args.indir)

    if not args.outdir:
        args.outdir = args.indir + '.split'
    args.outdir = os.path.normpath(args.outdir)

    return args


def longest_common_substring(s1, s2):
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)):
        for y in range(1, 1 + len(s2)):
            if s1[x - 1] == s2[y - 1]:
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest:
                    longest = m[x][y]
                    x_longest = x
            else:
                m[x][y] = 0
    return s1[x_longest - longest: x_longest]


if __name__ == '__main__':
    args = parse_args()

    files = glob.glob(args.indir + '/*')

    if len(files) < 2:
        logging.error("less than two files/directories found in source directory: {}".format(args.indir))
        sys.exit(1)

    files_basenames = [os.path.basename(file) for file in files]

    if not args.suffix:
        lcs = files_basenames[0]
        for file in files_basenames[1:]:
            lcs = longest_common_substring(lcs, file)
        args.suffix = lcs

    files_prefixes = set(re.sub(args.suffix, '', file) for file in files_basenames)

    for prefix in files_prefixes:
        outdir = os.path.join(args.outdir, prefix)

        if os.path.exists(outdir):
            if args.force:
                shutil.rmtree(outdir)
            else:
                logging.warning("directory exists: {}".format(dir))
                sys.exit(1)

        os.makedirs(outdir)

        files = glob.glob(os.path.join(args.indir, prefix) + '*')
        for file in files:
            if args.mv:  # moving file
                shutil.move(file, outdir)
            else:  # creating symbolic links
                link_name = os.path.join(outdir, os.path.basename(file))
                source = os.path.relpath(os.path.abspath(file), outdir)
                os.symlink(source, link_name)